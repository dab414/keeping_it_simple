## this script was written before I learned dplyr
library(data.table)
library(plyr)
library(dplyr)
current_data <- fread('data/disconnect_green1-18.csv')
keep <- matrix(c('Subject', 'subject',
'blocks.Sample', 'block',
'pointvalueL[SubTrial]', 'leftpoints',
'pointvalueR[SubTrial]', 'rightpoints',
'colorL[SubTrial]','colorl',
'colorR[SubTrial]','colorr',
'Procedure[SubTrial]', 'procedure',
'responselocation[SubTrial]', 'responselocation',
'RSI[SubTrial]', 'rsi',
'stim1[SubTrial]', 'stim1',
'stimulus.RT[SubTrial]', 'rt',
'blocktime', 'blocktime',
'taskcode[SubTrial]', 'taskcode',
'transition[SubTrial]', 'transition'
),ncol=2, byrow=T)
current_data <- current_data[,keep[,1], with = FALSE]
colnames(current_data) <- keep[,2]
## keeping as data frame bc of this shitty, old code
current_data <- as.data.frame(current_data)
#compute the vars
current_data$error <- ifelse(current_data$taskcode == 'error', 1, 0)
current_data$errortrim <- ifelse(current_data$error == 1 | shift(current_data$error) == 1, 1, 0)
current_data$transcode <- ifelse(current_data$transition == "Switch", 1, ifelse(current_data$transition == "Rep", 0, ""))
current_data$stimrep <- ifelse(current_data$stim1 == shift(current_data$stim1), 1, 0)
current_data$colorl <- ifelse(current_data$colorl == '0,92,0', 'green',ifelse(current_data$colorl == '0,183,0','light green','black'))
current_data$colorr <- ifelse(current_data$colorr == '0,92,0', 'green',ifelse(current_data$colorr == '0,183,0','light green','black'))
current_data$current_pv <- as.numeric(ifelse(shift(current_data$responselocation) == 'left', current_data$leftpoints, ifelse(shift(current_data$responselocation) == 'right', current_data$rightpoints, '')))
current_data$other_pv <- as.numeric(ifelse(shift(current_data$responselocation) == 'right', current_data$leftpoints, ifelse(shift(current_data$responselocation) == 'left', current_data$rightpoints, '')))
current_data$colorl <- as.factor(current_data$colorl)
current_data$colorr <- as.factor(current_data$colorr)
current_data$color <- ifelse(current_data$colorl == 'green' | current_data$colorr == 'green', 'green', ifelse(current_data$colorl == 'light green' | current_data$colorr == 'light green', 'light green','black'))
current_data$color <- as.factor(current_data$color)
#subject errors
subject_log <- data.frame(description = 'Initial Subjects', amount = nrow(aggregate(current_data$rt, by = list(current_data$subject), FUN = mean)))
errors_all <- aggregate(current_data$error, by = list(current_data$subject), FUN = mean)
errors_bad <- errors_all[errors_all$x > .15,]
if (nrow(errors_bad) > 0) {
subject_log <- rbind(subject_log, data.frame(description = 'error subjects', amount = nrow(errors_bad)))
current_data <- current_data[!errors_bad$Group.1 %in% current_data$subject,]
} else subject_log <- rbind(subject_log, data.frame(description = 'error subjects', amount = 0))
N <- nrow(aggregate(current_data$rt, by = list(current_data$subject), FUN = mean))
#compute point-transition variables
current_data$current <- ifelse(shift(current_data$responselocation) == 'left', current_data$leftpoints - shift(current_data$leftpoints), ifelse(shift(current_data$responselocation) == 'right', current_data$rightpoints - shift(current_data$rightpoints),""))
current_data$other <- ifelse(shift(current_data$responselocation) == 'left', current_data$rightpoints - shift(current_data$rightpoints), ifelse(shift(current_data$responselocation) == 'right', current_data$leftpoints - shift(current_data$leftpoints),""))
current_data$difference <- ifelse(shift(current_data$responselocation) == 'left', current_data$rightpoints - current_data$leftpoints, ifelse(shift(current_data$responselocation) == 'right', current_data$leftpoints - current_data$rightpoints,""))
current_data$current <- as.numeric(current_data$current)
current_data$other <- as.numeric(current_data$other)
current_data$difference <- as.numeric(current_data$difference)
current_data$transcode <- as.numeric(current_data$transcode)
current_data$differencechange <- current_data$difference - shift(current_data$difference)
current_data$difference_d <- ifelse(current_data$difference > 0, 'other', ifelse(current_data$difference < 0, 'current', ''))
current_data$difference_d <- as.factor(current_data$difference_d)
#number of switches in a block
temp <- aggregate(current_data$transcode, by = list(current_data$block,current_data$subject), FUN = sum)
colnames(temp) <- c('block','subject','block_switch_sum')
current_data <- join(current_data, temp, by = c('block','subject'))
rm(temp)
## trim out extraneous vars, im just gonna gut a lot of this (1/16)
current_data <- current_data %>%
select(-leftpoints, -responselocation, -rightpoints, -stim1, -taskcode, -current, -other, -differencechange, -difference_d, -block_switch_sum, -colorr, -colorl) %>%
data.table()
## save error data
error_data <- current_data
## trim procedure
current_data <- current_data[procedure == 'trialproc']
#trial trimming
initial <- nrow(current_data)
current_data <- current_data %>%
filter(transition != 'StartBlock',
errortrim == 0) %>%
select(-procedure, -transition, -errortrim, -error) %>%
data.table()
first_round <- nrow(current_data)
# error data
error_data <- as.data.table(error_data)
error_data <- error_data %>%
filter(procedure == 'trialproc',
transition != 'StartBlock') %>%
select(-procedure, -transition) %>%
data.table()
# rt data
current_data <- as.data.table(current_data)
rt_data <- current_data[, c('rt_mean', 'rt_sd') := .(mean(rt), sd(rt)), by = subject][rt <= 2*rt_sd + rt_mean & rt >= rt_mean - 2*rt_sd][, c('rt_mean', 'rt_sd') := NULL]
second_round <- nrow(rt_data)
#in this dataset, subjects 1 and 2 only had 10 blocks, so I'm dropping
current_data <- current_data[current_data$subject != 1 & current_data$subject != 2]
write.csv(current_data, 'data/disconnect_green.csv',row.names = F)
write.csv(rt_data, 'data/disconnect_green_rt.csv',row.names = F)
write.csv(error_data, 'data/disconnect_green_error.csv',row.names = F)
paste('After trimming trials for errors and start block, ', round(((1 - (first_round / initial)) * 100), 2), '% of the data was trimmed.', sep ='')
paste('After trimming trials for rt outliers, ', round(((1 - (second_round / first_round)) * 100), 2), '% of the data was trimmed.', sep ='')
quit()
